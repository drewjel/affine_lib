import ..affnKcoord.affnKcoord_transforms
import data.real.basic
import linear_algebra.affine_space.basic
import topology.metric_space.emetric_space
import analysis.normed_space.inner_product
import data.complex.is_R_or_C
import topology.metric_space.pi_Lp
import data.real.nnreal

open_locale big_operators
open_locale nnreal

open ennreal

abbreviation K := ‚Ñù

variables
{dim : nat} {id_vec : fin dim ‚Üí nat }{f : fm K dim id_vec} (s : spc K f)
{dim2 : nat } {id_vec2 : fin dim ‚Üí nat} {f2 : fm K dim id_vec} (s2 : spc K f2)


noncomputable def dot_product_coord
  : vectr s ‚Üí vectr s ‚Üí ‚Ñù
| v1 v2 := 
    (‚àë (i : fin dim), ‚Üë((v1.coords i).coord * (v1.coords i).coord))

    

noncomputable def norm_coord
  : vectr s ‚Üí ‚Ñù
| v1 := 
    real.sqrt (dot_product_coord _ v1 v1)

noncomputable instance vectr_norm : has_norm (vectr s) := ‚ü®norm_coord s‚ü©

noncomputable instance vectr_inner : has_inner ‚Ñù (vectr s) := ‚ü®dot_product_coord s‚ü©

notation `‚ü™`x`, `y`‚ü´` := has_inner.inner x y

noncomputable
def l2_metric
  : point s ‚Üí point s ‚Üí ‚Ñù
| pt1 pt2 := ‚à•pt1 -·µ• pt2‚à•

noncomputable
def l2_extended_metric
  : point s ‚Üí point s ‚Üí ennreal
| pt1 pt2 := option.some (‚ü®‚à•pt1 -·µ• pt2‚à•,begin
  dsimp only [has_norm.norm, norm_coord],
  apply real.sqrt_nonneg,
end‚ü©:(‚Ñù‚â•0))

noncomputable
instance euclidean_distance_coord : has_dist (point s) := ‚ü®l2_metric s‚ü© 

noncomputable
instance euclidean_extended_distance_coord : has_edist (point s) := ‚ü®l2_extended_metric s‚ü©

/-
structure emetric_space (Œ± : Type u) :
Type u
to_has_edist : has_edist Œ±
edist_self : ‚àÄ (x : Œ±), edist x x = 0
eq_of_edist_eq_zero : ‚àÄ {x y : Œ±}, edist x y = 0 ‚Üí x = y
edist_comm : ‚àÄ (x y : Œ±), edist x y = edist y x
edist_triangle : ‚àÄ (x y z : Œ±), edist x z ‚â§ edist x y + edist y z
to_uniform_space : uniform_space Œ±
uniformity_edist : (ùì§ Œ± = ‚®Ö (Œµ : ennreal) (H : Œµ > 0), ùìü {p : Œ± √ó Œ± | edist p.fst p.snd < Œµ}) . "control_laws_tac"
-/
/-
class metric_space (Œ± : Type u) extends has_dist Œ± : Type u :=
(dist_self : ‚àÄ x : Œ±, dist x x = 0)
(eq_of_dist_eq_zero : ‚àÄ {x y : Œ±}, dist x y = 0 ‚Üí x = y)
(dist_comm : ‚àÄ x y : Œ±, dist x y = dist y x)
(dist_triangle : ‚àÄ x y z : Œ±, dist x z ‚â§ dist x y + dist y z)
(edist : Œ± ‚Üí Œ± ‚Üí ennreal := Œªx y, ennreal.of_real (dist x y))
(edist_dist : ‚àÄ x y : Œ±, edist x y = ennreal.of_real (dist x y) . control_laws_tac)
(to_uniform_space : uniform_space Œ± := uniform_space_of_dist dist dist_self dist_comm dist_triangle)
(uniformity_dist : ùì§ Œ± = ‚®Ö Œµ>0, ùìü {p:Œ±√óŒ± | dist p.1 p.2 < Œµ} . control_laws_tac)


-/
/-


-/
--#eval noncomputable_value -- doesn't work


noncomputable instance euclidean_pseudo_metric_space_pt : pseudo_metric_space (point s)
  := ‚ü®begin
    intros,
    dsimp only [dist, l2_metric, norm, norm_coord, dot_product_coord,
      has_vsub.vsub, aff_point_group_sub, sub_point_point, 
      mk_vectr', aff_pt_group_sub, sub_pt_pt],
    simp,
  end, begin
    intros,
    dsimp only [dist, l2_metric, norm, norm_coord, dot_product_coord, 
      has_vsub.vsub, aff_point_group_sub, sub_point_point, 
      mk_vectr', aff_pt_group_sub, sub_pt_pt],
    have h‚ÇÄ : ‚àÄ x y : ‚Ñù, x - y = -(y - x) := begin
      intros,
      simp only [neg_sub],
    end,
    -- rw h‚ÇÄ,
    have h‚ÇÅ : ‚àÄ x : ‚Ñù, (-x) * (-x) = x * x := begin
      intros,
      simp only [neg_mul_eq_neg_mul_symm, mul_neg_eq_neg_mul_symm, neg_neg],
    end,
    sorry,
  end, begin
    intros,
    dsimp only [dist, l2_metric, norm, norm_coord, dot_product_coord, 
      has_vsub.vsub, aff_point_group_sub, sub_point_point, 
      mk_vectr', aff_pt_group_sub, sub_pt_pt],
    sorry,
  end, sorry, sorry, sorry, sorry‚ü©

instance euclidean_dist_vec : has_dist (vectr s)
  := ‚ü®sorry‚ü©

instance euclidean_pseudo_metric_space_vec : pseudo_metric_space (vectr s)
  := ‚ü®sorry, sorry, sorry, sorry, sorry, sorry, sorry‚ü©

noncomputable
instance euclidean_metric_space_pt : metric_space (point s)
  := ‚ü®begin
    intros x y h,
    dsimp only [dist, l2_metric, norm, norm_coord, dot_product_coord, 
      has_vsub.vsub, aff_point_group_sub, sub_point_point, 
      mk_vectr', aff_pt_group_sub, sub_pt_pt] at h,
    have h‚ÇÅ := real.sqrt_eq_zero'.1 h,
    have h‚ÇÇ : ‚àÄ r : ‚Ñù, r ‚â• 0 ‚Üí ‚àë (i : fin dim), r ‚â• 0 := begin
      intros r hy,
      simp only [finset.card_fin, finset.sum_const, ge_iff_le, nsmul_eq_mul],
      have h‚ÇÉ : ‚Üëdim ‚â• 0 := by simp only [ge_iff_le, zero_le'],
      have h‚ÇÑ : r = 0 ‚à® r > 0 := sorry, -- should be able to prove with hy
      cases h‚ÇÑ,
      {
        rw h‚ÇÑ,
        simp only [mul_zero],
      },
      {
        have h‚ÇÖ : ‚Üëdim = 0 ‚à® ‚Üëdim > 0 := sorry, -- should be able to prove with h‚ÇÉ
        cases h‚ÇÖ,
        {
          -- rw h‚ÇÖ,
          sorry,
        },
        {
          dsimp only [gt] at h‚ÇÖ h‚ÇÑ,
          -- have h‚Çà := real.mul_pos h‚Çá h‚ÇÖ,
          sorry
        }
      }
    end,
    have h‚ÇÉ : ‚àÄ r : ‚Ñù, r * r ‚â• 0 := begin
      intros,
      sorry,
    end,
    have h‚ÇÑ : ‚àë (i : fin dim), (‚Üë(((x.coords i).coord - (y.coords i).coord) * ((x.coords i).coord - (y.coords i).coord)) : ‚Ñù) ‚â• 0 := begin
      simp only [is_R_or_C.coe_real_eq_id, id.def],
      have hy : ‚àÄ (i : fin dim), ((x.coords i).coord - (y.coords i).coord) * ((x.coords i).coord - (y.coords i).coord) ‚â• 0 := by {intros, apply h‚ÇÉ},
      -- apply h‚ÇÇ,
      sorry,
    end,
    have h‚ÇÖ : ‚àë (i : fin dim), (‚Üë(((x.coords i).coord - (y.coords i).coord) * ((x.coords i).coord - (y.coords i).coord)) : ‚Ñù) = 0 := le_antisymm h‚ÇÅ h‚ÇÑ,
    sorry, -- don't know where to go from here
  end‚ü©

instance euclidean_metric_space_vec : metric_space (vectr s)
  := ‚ü®begin
    intros x y h,
    sorry,
  end‚ü©

noncomputable
instance euclidean_pseudo_extended_metric_space_pt : pseudo_emetric_space (point s) 
  := ‚ü®begin
    intros,
    dsimp only [edist, l2_extended_metric],
    simp only [some_eq_coe, coe_eq_zero],
    dsimp only [has_zero.zero],
    simp only [subtype.mk_eq_mk],
    dsimp only [has_norm.norm, norm_coord, dot_product_coord],
    simp only [is_R_or_C.coe_real_eq_id, id.def],
    dsimp only [has_vsub.vsub, aff_point_group_sub, sub_point_point, aff_pt_group_sub, sub_pt_pt, mk_vectr'],
    simp,
    sorry,
  end, begin
    intros,
    dsimp only [edist, l2_extended_metric],
    simp only [coe_eq_coe, subtype.mk_eq_mk, some_eq_coe],
    dsimp only [norm, norm_coord, dot_product_coord],
    -- Should be similar to the lemmata in euclidean_metric_space_pt
    sorry,
  end, begin
    intros,
    dsimp only [edist, l2_extended_metric],
    simp only [some_eq_coe],
    sorry,
  end, sorry, sorry‚ü©

instance euclidean_pseudo_extended_metric_space_vec : pseudo_emetric_space (vectr s)
  := ‚ü®sorry, sorry, sorry, sorry, sorry‚ü©

noncomputable
instance euclidean_extended_metric_space_pt : emetric_space (point s) 
  := ‚ü®begin
    intros x y h,
    dsimp only [edist, l2_extended_metric] at h,
    simp only [some_eq_coe, coe_eq_zero] at h,
    dsimp only [has_zero.zero] at h,
    simp only [subtype.mk_eq_mk] at h,
    dsimp only [has_norm.norm, norm_coord] at h,
    -- once again, must prove 0 = zero
    sorry
  end‚ü©

noncomputable
instance euclidean_extended_metric_space_vec : emetric_space (vectr s) 
  := ‚ü®sorry‚ü©


noncomputable
instance euclidean_extended_metric_space : emetric_space (point s) 
  := ‚ü®begin
    intros x y h,
    dsimp only [edist, l2_extended_metric] at h,
    simp only [some_eq_coe, coe_eq_zero] at h,
    dsimp only [has_zero.zero] at h,
    simp only [subtype.mk_eq_mk] at h,
    simp only [has_norm.norm, norm_coord, dot_product_coord, 
      is_R_or_C.coe_real_eq_id, id.def, has_vsub.vsub,
      aff_point_group_sub, sub_point_point, aff_pt_group_sub,
      sub_pt_pt, mk_vectr'] at h,
    -- Once again, can't proceed without proving 0 = zero
    -- Also, wouldn't h be true for x = ‚ü®3,2,1‚ü© and y = ‚ü®1,2,3‚ü©, making this proof impossible?
    sorry,
  end‚ü©
   
/-
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
-/

noncomputable 
instance euclidean_normed_group : normed_group (vectr s) 
  :=
  ‚ü®
    begin
      intros,
      dsimp only [has_norm.norm, norm_coord, dot_product_coord],
      dsimp only [dist],
      sorry
    end
  ‚ü©
/-
(norm_smul_le : ‚àÄ (a:Œ±) (b:Œ≤), ‚à•a ‚Ä¢ b‚à• ‚â§ ‚à•a‚à• * ‚à•b‚à•)
-/

noncomputable 
instance euclidean_normed_space [module K (vectr s)] : normed_space K (vectr s) 
  :=
  ‚ü®begin
    intros,
    dsimp only [has_norm.norm, norm_coord, dot_product_coord],
    simp only [is_R_or_C.coe_real_eq_id, id.def],
    -- dsimp only [has_scalar.smul],
    sorry,
  end‚ü©

/-
class inner_product_space (ùïú : Type*) (E : Type*) [is_R_or_C ùïú]
  extends normed_group E, normed_space ùïú E, has_inner ùïú E :=
(norm_sq_eq_inner : ‚àÄ (x : E), ‚à•x‚à•^2 = re (inner x x))
(conj_sym  : ‚àÄ x y, conj (inner y x) = inner x y)
(nonneg_im : ‚àÄ x, im (inner x x) = 0)
(add_left  : ‚àÄ x y z, inner (x + y) z = inner x z + inner y z)
(smul_left : ‚àÄ x y r, inner (r ‚Ä¢ x) y = (conj r) * inner x y)

-/

noncomputable
instance euclidean_normed_space_vec : normed_space ‚Ñù (vectr s)
  := ‚ü®begin
    intros,
    dsimp only [has_norm.norm, norm_coord, dot_product_coord, 
      has_scalar.smul, smul_vectr, smul_vec, mk_vectr'],
    rw eq.symm (real.sqrt_mul_self_eq_abs a),
    have h‚ÇÄ : (‚àë (i : fin dim), ‚Üë(a * (b.coords i).coord * (a * (b.coords i).coord))) = (‚àë (i : fin dim), ‚Üë(a * a * (b.coords i).coord * (b.coords i).coord)) := sorry,
    have h‚ÇÅ : (‚àë (i : fin dim), ‚Üë(a * a * (b.coords i).coord * (b.coords i).coord)) = a * a * (‚àë (i : fin dim), ‚Üë((b.coords i).coord * (b.coords i).coord)) := sorry,
    have h‚ÇÇ : ‚àÄ x y : ‚Ñù, real.sqrt x * real.sqrt y = real.sqrt (x * y) := sorry,
    rw [h‚ÇÄ, h‚ÇÅ, h‚ÇÇ],
  end‚ü©

noncomputable
instance euclidean_inner_product_space : inner_product_space ‚Ñù (vectr s)
  := ‚ü®sorry, sorry, sorry, sorry‚ü©



structure affine_euclidean_space.angle 
  :=
  (val : ‚Ñù)



noncomputable
def vectr.compute_angle
    (v1 : vectr s)
    : vectr s ‚Üí affine_euclidean_space.angle
    := 
      Œª v2,
      ‚ü®real.arccos ‚ü™v1,v2‚ü´/‚à•v1‚à•*‚à•v2‚à•‚ü©


structure orientation extends vectr_basis s := 
    (col_norm_one : ‚àÄ i : fin dim, ‚à•basis_vectrs i‚à• = 1)
    (col_orthogonal : ‚àÄ i j : fin dim, i‚â†j ‚Üí ‚ü™basis_vectrs i,basis_vectrs j‚ü´ = (0:‚Ñù))

/-
don't prove here *yet*
-/
noncomputable
def mk_orientation (ortho_vectrs : fin dim ‚Üí vectr s) : orientation s :=
  ‚ü®‚ü®ortho_vectrs, sorry, sorry‚ü©, begin
    intros,
    simp only,
    dsimp only [has_norm.norm, norm_coord, dot_product_coord],
    have h‚ÇÅ : ‚àÄ r : ‚Ñù, real.sqrt r = 1 ‚Üî r = 1 := Œª r,
      if nonneg : 0 ‚â§ r then begin
        intros,
        split,
        intro h,
        have h‚ÇÇ : (0 : ‚Ñù) ‚â§ (1 : ‚Ñù) := begin
          have h‚ÇÉ : (0 : ‚Ñù) < 1 ‚à® (0 : ‚Ñù) = 1 := or.inl real.zero_lt_one,
          have h‚ÇÑ := le_iff_lt_or_eq.2 h‚ÇÉ,
          exact h‚ÇÑ,
        end,
        have h‚ÇÉ := (real.sqrt_eq_iff_mul_self_eq nonneg h‚ÇÇ).1 h,
        simp only [mul_one] at h‚ÇÉ,
        exact eq.symm h‚ÇÉ,
        intro h,
        rw h,
        exact real.sqrt_one,
      end
      else begin
        simp only [not_le] at nonneg,
        have h‚ÇÇ : r ‚â§ 0 := begin
          have h‚ÇÉ : r < 0 ‚à® r = 0 := or.inl nonneg,
          have h‚ÇÑ := le_iff_lt_or_eq.2 h‚ÇÉ,
          exact h‚ÇÑ,
        end,
        intros,
        split,
        intro h,
        have h‚ÇÉ := eq.trans (eq.symm (real.sqrt_eq_zero_of_nonpos h‚ÇÇ)) h,
        have h‚ÇÑ := zero_ne_one h‚ÇÉ,
        contradiction,
        intro h,
        rw h at nonneg,
        have h‚ÇÉ := lt_asymm real.zero_lt_one,
        contradiction,
      end,
    rw h‚ÇÅ,
    sorry,
  end, begin
    intros i j h,
    simp only,
    dsimp only [has_inner.inner, dot_product_coord],
    sorry,
  end‚ü©

structure rotation extends fm_tr s s :=
  (rotation_no_displacement : ‚àÄ v : vectr s, ‚à•(to_fm_tr.transform_vectr 0)‚à• = 0)
  (rotation_no_scaling : ‚àÄ v : vectr s, ‚à•(to_fm_tr.transform_vectr v)‚à• = 1) 
  (rotation_col_orthogonal : ‚àÄ i j : fin dim, 
        i‚â†j ‚Üí
        ‚ü™ to_fm_tr.transform_vectr (‚ü®(fm.base dim id_vec).basis.basis_vecs i‚ü©:vectr s),
          to_fm_tr.transform_vectr ((‚ü®(fm.base dim id_vec).basis.basis_vecs j‚ü©):vectr s)‚ü´ 
          = (0:‚Ñù))


def mk_rotation' {K : Type u} [inhabited K] [normed_field K] [has_lift_t K ‚Ñù]
{dim : nat} {id_vec : fin dim ‚Üí nat }{f : fm K dim id_vec} {s : spc K f} (b : vectr_basis s) : rotation s :=
‚ü® 
  begin
    
    eapply fm_tr.mk,
    split,
    {
      intros,
      dsimp only [has_vadd.vadd, add_vectr_point, aff_vec_group_action, add_vec_pt, mk_point'],
      sorry
    },
    split,
    {
      dsimp only [function.left_inverse],
      intros,
      sorry
    },
    {
      dsimp only [function.right_inverse, function.left_inverse],
      intros,
      sorry
    },
    exact (Œª p, mk_point_from_coords (b.to_matrix.mul_vec p.to_coords)),
    exact (Œª p, mk_point_from_coords (b.to_matrix.cramer_inverse.mul_vec p.to_coords)),

         --(Œª p, mk_point_from_coords (b.to_matrix.mul_vec p.to_coords)),
          --(Œª p, mk_point_from_coords ((b.to_matrix.cramer_inverse.mul_vec p.to_coords)),
    split,
    {
      intros,
      sorry
    },
    {
      intros,
      sorry,
    },
    {
      dsimp only [function.left_inverse],
      intros,
      sorry
    },
    {
      dsimp only [function.right_inverse, function.left_inverse],
      intros,
      sorry
    },
    exact (Œª v, mk_vectr_from_coords (b.to_matrix.mul_vec v.to_coords)),
    exact (Œª p, mk_vectr_from_coords (b.to_matrix.cramer_inverse.mul_vec p.to_coords)),
  end
,begin
  intro h,
  dsimp only [fm_tr.transform_vectr],
  simp only [mk_vec, mk_pt, equiv.coe_fn_mk, norm_eq_zero],
  dsimp only [has_zero.zero],
  dsimp only [vectr_zero, mk_vectr, mk_vec_n, mk_vec],
  simp only,
  sorry,
end, sorry, sorry‚ü©

def mk_rotation (ortho_vectrs : fin dim ‚Üí vectr s) : rotation s :=
  (mk_rotation' ‚ü®ortho_vectrs, sorry, sorry‚ü©)


instance : has_lift_t (orientation s) (rotation s) := ‚ü®Œªo, mk_rotation' o.1/-subtype notation-/‚ü©